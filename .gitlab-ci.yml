variables:
  GIT_DEPTH: 1

stages:
  - prepare release
  - build
  - package
  - deploy

.common_scripts: &common_scripts |
  set -e

  if [[ -n "${DEBUG_CI+x}" ]] ; then
    set -x
  fi

  function is_snapshot() {
    # This is compatible way to verify that $CI_COMMIT_TAG is empty or $VERSION contains SNAPSHOT
    [ -z "$CI_COMMIT_TAG" ] || [ -z "${VERSION##*SNAPSHOT*}" ]
  }

  function get_version() {
    jq '.version' -c -r -M package.json | tee version
  }

  export VERSION="$(get_version)"

  function init_git() {
    apt-get install -y --no-upgrade --no-install-recommends git openssh-client
    git config --global user.name "${GITLAB_USER_NAME}"
    git config --global user.email "${GITLAB_USER_EMAIL}"
  }

  function set_npm_token() {
    npm c set "//gitlab.com/api/v4/projects/:_authToken" $CI_JOB_TOKEN
    npm c set "//gitlab.com/api/v4/packages/npm/:_authToken" $CI_JOB_TOKEN
    echo 'Successfully set NPM registry token'
  }

.release_scripts: &release_scripts |
  function increment_version() {
    current_version_str=$1
    current_date_prefix=$(date '+%y%m.%d.')
    if [[ "$current_version_str" == $current_date_prefix* ]]; then
      # Increment only last part
      current_version_arr=(${current_version_str//./ })
      new_minor=$((current_version_arr[2]+1))
      new_version="${current_date_prefix}${new_minor}"
    else
      # Make new version string
      new_version="${current_date_prefix}0"
    fi

    echo "${new_version}"
  }

  function make_release() {
    git checkout -B "$CI_BUILD_REF_NAME"
    git remote set-url origin "https://${GITLAB_USER_LOGIN}:${CI_GIT_TOKEN}@$CI_SERVER_HOST/$CI_PROJECT_PATH.git"

    new_version="$(increment_version "$VERSION")"
    jq ".version=\"${new_version}\"" package.json > package.json.tmp && mv package.json.tmp package.json

    git commit -am "Released version ${new_version}"
    git push origin "$CI_BUILD_REF_NAME"
    git tag "${new_version}"
    git push origin "${new_version}"
  }

.docker_scripts: &docker_scripts |
  function init_docker() {
    mkdir -p ~/.docker && echo "$DOCKER_AUTH_CONFIG" > ~/.docker/config.json
  }

  function get_other_image_tags() {
    latest_branch_tag="$INOVIA_DOCKER_REGISTRY/$IMAGE_NAME:latest-$CI_COMMIT_REF_NAME"
    if is_snapshot ; then
      echo -n "$latest_branch_tag"
    else
      echo -n "$latest_branch_tag" "$INOVIA_DOCKER_REGISTRY/$IMAGE_NAME:$VERSION"
    fi
  }

  function docker_build_static() {
    commit_image_name="$INOVIA_DOCKER_REGISTRY/$IMAGE_NAME:commit-$CI_COMMIT_SHA"
    docker build --pull --build-arg version="$VERSION" -t "$commit_image_name" -f nginx/Dockerfile .
    docker push "$commit_image_name"

    for tag in $(get_other_image_tags); do \
      docker tag "$commit_image_name" "$tag"
      docker push "$tag"
    done
  }

  export IMAGE_NAME="v2t/${CI_PROJECT_NAME}"


.release_condition: &release_condition
  only:
    refs:
      - main
  except:
    variables:
      - $RELEASE == null

.not_release_condition: &not_release_condition
  except:
    variables:
      - $RELEASE

### stage: prepare-release
##################################################
bump-version:
  <<: *release_condition
  image: node:lts-jessie
  stage: prepare release
  before_script:
    - apt update && apt install -y jq
    - *common_scripts
    - *release_scripts
  script:
    - init_git
    - make_release
  allow_failure: false


### stage: build
##################################################
build-static:
  <<: *not_release_condition
  image: node:14-bullseye
  stage: build
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
    - node_modules/
    - .yarn
  before_script:
    - *common_scripts
    - apt update && apt install -y jq python2.7
    - set_npm_token
    - yarn config set cache-folder .yarn
    - yarn install
  script:
    - yarn lint
    - yarn build
  only:
    - branches
    - tags
    - web
  artifacts:
    name: static-site
    paths:
      - ./build/
    expire_in: 1 week

### stage: package
##################################################
docker-static:
  <<: *not_release_condition
  image: docker:stable
  stage: package
  variables:
    DOCKER_TLS_CERTDIR: ""
    DOCKER_DRIVER: overlay2
    DOCKER_HOST: tcp://docker:2375
  services:
    - docker:stable-dind
  before_script:
    - apk add --no-cache bash jq
    - *common_scripts
    - *docker_scripts
  script:
    - init_docker
    - docker_build_static
  only:
    - branches
    - tags
    - web
  dependencies:
    - build-static


### stage: deploy
##################################################
deploy-to-dev:
  <<: *not_release_condition
  cache: {}
  image:
    name: bitnami/kubectl:latest
    entrypoint: [""]
  stage: deploy
  before_script:
    - kubectl config get-contexts
    - kubectl config use-context inoviaab/v2t/v2t-env:v2t-dev
  script:
    - kubectl rollout restart deployment/ui --namespace=v2t-dev
  variables:
    GIT_STRATEGY: none
  only:
    - main
  dependencies:
    - docker-static
